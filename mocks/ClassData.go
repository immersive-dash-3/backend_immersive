// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	classes "immersive_project/klp3/features/classes"

	mock "github.com/stretchr/testify/mock"
)

// ClassData is an autogenerated mock type for the ClassDataInterface type
type ClassData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: id
func (_m *ClassData) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: input
func (_m *ClassData) Insert(input classes.ClassessEntity) (uint, error) {
	ret := _m.Called(input)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(classes.ClassessEntity) (uint, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(classes.ClassessEntity) uint); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(classes.ClassessEntity) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SelectAll provides a mock function with given fields: page, pageSize
func (_m *ClassData) SelectAll(page int, pageSize int) (int, []classes.ClassessEntity, error) {
	ret := _m.Called(page, pageSize)

	var r0 int
	var r1 []classes.ClassessEntity
	var r2 error
	if rf, ok := ret.Get(0).(func(int, int) (int, []classes.ClassessEntity, error)); ok {
		return rf(page, pageSize)
	}
	if rf, ok := ret.Get(0).(func(int, int) int); ok {
		r0 = rf(page, pageSize)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, int) []classes.ClassessEntity); ok {
		r1 = rf(page, pageSize)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]classes.ClassessEntity)
		}
	}

	if rf, ok := ret.Get(2).(func(int, int) error); ok {
		r2 = rf(page, pageSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// SelectById provides a mock function with given fields: id
func (_m *ClassData) SelectById(id uint) (classes.ClassessEntity, error) {
	ret := _m.Called(id)

	var r0 classes.ClassessEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (classes.ClassessEntity, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(uint) classes.ClassessEntity); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(classes.ClassessEntity)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: id, input
func (_m *ClassData) Update(id uint, input classes.ClassessEntity) (uint, error) {
	ret := _m.Called(id, input)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(uint, classes.ClassessEntity) (uint, error)); ok {
		return rf(id, input)
	}
	if rf, ok := ret.Get(0).(func(uint, classes.ClassessEntity) uint); ok {
		r0 = rf(id, input)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(uint, classes.ClassessEntity) error); ok {
		r1 = rf(id, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewClassData interface {
	mock.TestingT
	Cleanup(func())
}

// NewClassData creates a new instance of ClassData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewClassData(t mockConstructorTestingTNewClassData) *ClassData {
	mock := &ClassData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
