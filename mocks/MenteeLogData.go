// Code generated by mockery v2.28.1. DO NOT EDIT.

package mocks

import (
	menteelogs "immersive_project/klp3/features/menteelogs"

	mock "github.com/stretchr/testify/mock"
)

// MenteeLogData is an autogenerated mock type for the MenteeLogDataInterface type
type MenteeLogData struct {
	mock.Mock
}

// Delete provides a mock function with given fields: idLog
func (_m *MenteeLogData) Delete(idLog uint) error {
	ret := _m.Called(idLog)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(idLog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Insert provides a mock function with given fields: input
func (_m *MenteeLogData) Insert(input menteelogs.MenteeLogEntity) (string, error) {
	ret := _m.Called(input)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(menteelogs.MenteeLogEntity) (string, error)); ok {
		return rf(input)
	}
	if rf, ok := ret.Get(0).(func(menteelogs.MenteeLogEntity) string); ok {
		r0 = rf(input)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(menteelogs.MenteeLogEntity) error); ok {
		r1 = rf(input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertStatus provides a mock function with given fields: status
func (_m *MenteeLogData) InsertStatus(status string) (uint, error) {
	ret := _m.Called(status)

	var r0 uint
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (uint, error)); ok {
		return rf(status)
	}
	if rf, ok := ret.Get(0).(func(string) uint); ok {
		r0 = rf(status)
	} else {
		r0 = ret.Get(0).(uint)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(status)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Select provides a mock function with given fields: idMentee
func (_m *MenteeLogData) Select(idMentee uint) (menteelogs.MenteeEntity, error) {
	ret := _m.Called(idMentee)

	var r0 menteelogs.MenteeEntity
	var r1 error
	if rf, ok := ret.Get(0).(func(uint) (menteelogs.MenteeEntity, error)); ok {
		return rf(idMentee)
	}
	if rf, ok := ret.Get(0).(func(uint) menteelogs.MenteeEntity); ok {
		r0 = rf(idMentee)
	} else {
		r0 = ret.Get(0).(menteelogs.MenteeEntity)
	}

	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(idMentee)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: idLog, input
func (_m *MenteeLogData) Update(idLog uint, input menteelogs.MenteeLogEntity) error {
	ret := _m.Called(idLog, input)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, menteelogs.MenteeLogEntity) error); ok {
		r0 = rf(idLog, input)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateMentee provides a mock function with given fields: idStatus, idMentee
func (_m *MenteeLogData) UpdateMentee(idStatus uint, idMentee uint) error {
	ret := _m.Called(idStatus, idMentee)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint, uint) error); ok {
		r0 = rf(idStatus, idMentee)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewMenteeLogData interface {
	mock.TestingT
	Cleanup(func())
}

// NewMenteeLogData creates a new instance of MenteeLogData. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewMenteeLogData(t mockConstructorTestingTNewMenteeLogData) *MenteeLogData {
	mock := &MenteeLogData{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
