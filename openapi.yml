openapi: '3.0.2'
info:
  title: API immersive-dash
  description: The documentation of endpoints for immersive dashboard
  version: '1.0'
servers:
  - url: https://api.server.test/v1
tags:
  - name: Users
  - name: Mentee
    description: operation about mentee
  - name: Class
  - name: Logs
paths:
# users
  /users:
    get:
      tags:
        - Users
      summary: get all users
      description: "mendapatkan seluruh data users berdasarkan query params"
      security:
        - JWTAuth: []
      parameters:
        - name: page
          description: "untuk menentukan page ke berapa"
          required: true
          in: query
          schema:
            type: number
        - name: itemsPerPage
          description: "jumlah users yang ditampilan per halaman"
          required: true
          in: query
          schema:
            type: number
        - name: searchName
          description: "keyword untuk searching berdasarkan nama"
          required: false
          in: query
          schema:
            type: string
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: HTTP status code (e.g., 200 for success).
                    example: 200
                  message:
                    type: string
                    description: A human-readable message describing the result.
                    example: success
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/user'
        "400":
          description: bad request params
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    description: HTTP status code (e.g., 200 for success).
                    example: 400
                  message:
                    type: string
                    description: A human-readable message describing the result.
                    example: bad request query params
                  data:
                    type: array
                    items: {}
                    example: []
        "500":
          $ref: "#/components/responses/responseFailedInternal"
    post:
      tags:
        - Users
      summary: create a new user
      description: membuat user baru hanya untuk manager
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/create_user"
      responses:
        "200":
          $ref: "#/components/responses/responseSuccessCreate"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "500":
          $ref: "#/components/responses/responseFailedInternal"
    put:
      tags:
        - Users
      summary: update data user
      description: update data user sendiri
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/update_user"
      responses:
        "200":
          $ref: "#/components/responses/responseSuccess"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "500":
          $ref: "#/components/responses/responseFailedInternal"

  /users/{user_id}:
    put:
      tags:
        - Users
      summary: update data user for spesific id
      description: update data user untuk spesifik id oleh manager
      security:
        - JWTAuth: []
      parameters:
        - name: user_id
          description: "identifier user"
          required: true
          in: path
          schema:
            type: number
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/create_user"
      responses:
        "200":
          description: OK
          $ref: "#/components/responses/responseSuccess"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "500":
          $ref: "#/components/responses/responseFailedInternal"
    delete:
      tags:
        - Users
      summary: delete data user for spesific id
      description: delete data user untuk spesifik id oleh manager
      security:
        - JWTAuth: []
      parameters:
        - name: user_id
          description: "identifier user"
          required: true
          in: path
          schema:
            type: number
      responses:
        "200":
          $ref: "#/components/responses/responseSuccess"
        "404":
          $ref: "#/components/responses/responseNotFound"
        "500":
          $ref: "#/components/responses/responseFailedInternal"

# mentee
  /mentee:
    get:
      tags:
        - Mentee
      summary: get mentee data
      description: get mentee data by id
      security:
        - JWTAuth: []
      parameters:
        - name: page
          description: "untuk menentukan page ke berapa"
          required: true
          in: query
          schema:
            type: number
        - name: itemsPerPage
          description: "jumlah users yang ditampilan per halaman"
          required: true
          in: query
          schema:
            type: number
        - name: searchName
          description: "keyword untuk searching berdasarkan nama"
          required: false
          in: query
          schema:
            type: string
      responses:
        '200':
          description: success operation
          content:
            application/json:
              schema:
                $ref: "#components/schemas/responseSuccessArray"
        '404':
          $ref: "#/components/responses/responseNotFound"
        '500':
          $ref: "#/components/responses/responseFailedInternal"

    post:
      tags:
        - Mentee
      summary: add mentee data
      description: menambah data mentee
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/requestBodyMentee'

      responses:
        '201':
          $ref: "#/components/responses/responseSuccessCreate"
        '400':
          $ref: "#/components/responses/responseBadRequest"
        '500':
          $ref: "#/components/responses/responseFailedInternal"
                  
  /mentee/{mentee_id}:
    get:
      tags:
        - Mentee
      summary: get data mentee by id
      description: get data mentee by id via query param
      security:
        - JWTAuth: []
      parameters:
        - name: mentee_id
          description: contain id of the mentee
          required: true
          in: path
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/responseSuccessObject'
        '400':
          $ref: "#/components/responses/responseBadRequest"
        '404':
          $ref: "#/components/responses/responseNotFound"
        '500':
          $ref: "#/components/responses/responseFailedInternal"

    put:
      tags:
        - Mentee
      summary: update data mentee 
      description: update data mentee
      security:
        - JWTAuth: []
      parameters:
        - name: mentee_id
          description: contain id of the mentee
          required: true
          in: path
          schema:
            type: integer
            format: int64
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#components/schemas/requestBodyMentee'
      responses:
        '200':
          $ref: "#/components/responses/responseSuccess"
        '400':
          $ref: "#/components/responses/responseBadRequest"
        '500':
          $ref: "#/components/responses/responseFailedInternal"

    delete:
      tags:
        - Mentee
      summary: delete data mentee
      description: delete data mentee by id using query param
      security:
        - JWTAuth: []
      parameters:
        - name: mentee_id
          description: contain id of the mentee
          required: true
          in: path
          schema:
            type: integer
            format: int64
            example: 1
      responses:
        "200":
          $ref: "#/components/responses/responseSuccess"
        '400':
          $ref: "#/components/responses/responseBadRequest"
        '500':
          $ref: "#/components/responses/responseFailedInternal"

  /mentee/{mentee_id}/logs:
    post:
      tags:
        - Logs
      description: Menambah data logs mentee
      summary: insert class
      security:
        - JWTAuth: []
      parameters:
        - name: mentee_id
          description: "id mentee"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                status_id: 2
                logs: "sebenarnya sudah cukup baik, mungkin perlu ada beberapa peningkatan lagi"
      responses:
        "201":
          description: Insert berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  code: 201
                  message: "insert berhasil"
                  data:
                    id: 3
                    user_id: 2
                    status_id: 2
                    logs: "sebenarnya sudah cukup baik, mungkin perlu ada beberapa peningkatan lagi"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "500":
          $ref: "#/components/responses/responseFailedInternal"
    get:
      tags:
        - Logs
      description: Membaca semua data logs mentee
      summary: get class
      security:
        - JWTAuth: []
      parameters:
        - name: mentee_id
          description: "id mentee"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: get all success.
          content:
            application/json:
              schema:
                type: object
                example:
                  code: 200
                  message: "get success"
                  data:
                    mentee:
                      first_name: "sandi"
                      last_name: "irawan"
                      email: "sandi123@gmail.com"
                      phone_number: "08792738193"
                      telegram: "@irawansandi"
                      discord: "sandiyaw"
                      major: "mahasiswa"
                      class:
                        name: "BE 17"
                      data_log:
                        - id: 1
                          user:
                            id: 2
                            name: "ridwan"
                          status:
                            id: 3
                            name: "interview"
                          created_at: "2023-06-25 15:58:07.703"
                          log: "saya melihat perkembangan yang sangat pesat di unit ini"
                        - id: 2
                          user:
                            id: 4
                            name: "sari"
                          status:
                            id: 3
                            name: "join class"
                          created_at: "2023-06-25 15:58:07.703"
                          log: "mentee sedikit kesulitan sepertinya perlu ada perubahan materi"
                        - id: 4
                          user:
                            id: 2
                            name: "ridwan"
                          status:
                            id: 3
                            name: "interview"
                          created_at: "2023-06-25 15:58:07.703"
                          log: "saya melihat perkembangan yang sangat pesat di unit ini"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "500":
          $ref: "#/components/responses/responseFailedInternal"
  /logs/{logs_id}:
    put:
      tags:
        - Logs
      description: Mengedit data logs
      summary: update logs
      security:
        - JWTAuth: []
      parameters:
        - name: logs_id
          description: "id logs"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                status_id: 2
                logs: "sebenarnya sudah cukup baik, mungkin perlu ada beberapa peningkatan lagi"
      responses:
        "200":
          description: Edit berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  code: 200
                  message: "edit berhasil"
                  data:
                    id: 1
                    status_id: 2
                    logs: "sebenarnya sudah cukup baik, mungkin perlu ada beberapa peningkatan lagi"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "500":
          $ref: "#/components/responses/responseFailedInternal"
    delete:
      tags:
        - Logs
      description: Menghapus data logs
      summary: delete logs
      security:
        - JWTAuth: []
      parameters:
        - name: logs_id
          description: "id logs"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Delete berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  code: 200
                  message: "delete berhasil"
                  data: null
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "500":
          $ref: "#/components/responses/responseFailedInternal"

  /classes:
    post:
      tags:
        - Class
      description: Menambah data class
      summary: add class
      security:
        - JWTAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                name: "FE 11"
      responses:
        "201":
          description: Insert berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "insert berhasil"
                  data:
                    id: 1
                    name: "FE 11"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "500":
          $ref: "#/components/responses/responseFailedInternal"

    get:
      tags:
        - Class
      summary: get all class
      description: Melihat seluruh data class
      security:
        - JWTAuth: []
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "success get all class"
                  data:
                    - id: 1
                      name: "FE 11"
                    - id: 2
                      name: "BE 13"
                    - id: 3
                      name: "FE 14"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "500":
          $ref: "#/components/responses/responseFailedInternal"

  /classes/{class_id}:
    put:
      tags:
        - Class
      description: Mengedit data class
      summary: update class
      security:
        - JWTAuth: []
      parameters:
        - name: class_id
          description: "id class"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              example:
                name: "FE 14"
      responses:
        "200":
          description: Edit berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "edit berhasil"
                  data:
                    id: 1
                    name: "FE 14"
        "400":
          $ref: "#/components/responses/responseFailedInternal"
        "500":
          $ref: "#/components/responses/responseFailedInternal"

    delete:
      tags:
        - Class
      description: Menghapus data class
      summary: delete class
      security:
        - JWTAuth: []
      parameters:
        - name: class_id
          description: "id class"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Delete berhasil.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "delete berhasil"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "500":
          $ref: "#/components/responses/responseFailedInternal"
    
    get:
      tags:
        - Class
      description: Membaca data class by id
      summary: get class by id
      security:
        - JWTAuth: []
      parameters:
        - name: class_id
          description: "id class"
          required: true
          in: path
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: get success.
          content:
            application/json:
              schema:
                type: object
                example:
                  status: "success"
                  message: "berhasil membaca data class"
                  data:
                    id: 3
                    name: "FE 12"
        "400":
          $ref: "#/components/responses/responseBadRequest"
        "500":
          $ref: "#/components/responses/responseFailedInternal"

#==================================#
# component
#==================================#
components:
  securitySchemes:
    JWTAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: "use Token"
  
  responses:
    responseSuccess:
      description: failed
      content:
        application/json:
          schema:
            type: object
            properties:
              "code":
                type: integer
                format: int64
                example: 200
              "message":
                type: string
                description: A human-readable message describing the result.
                example: success
              "data":
                type: object
                example: null

    responseSuccessCreate:
      description: success
      content:
        application/json:
          schema:
            type: object
            properties:
              "code":
                type: integer
                format: int64
                example: 201
              "message":
                type: string
                description: A human-readable message describing the result.
                example: created
              "data":
                type: object
                example: null

    responseBadRequest:
      description: failed
      content:
        application/json:
          schema:
            type: object
            properties:
              "code":
                type: integer
                format: int64
                example: 400
              "message":
                type: string
                description: A human-readable message describing the result.
                example: operation failed, request resource not valid
              "data":
                type: object
                example: null
              
    responseNotFound:
      description: resouse was not found
      content:
        application/json:
          schema:
            type: object
            properties:
              "code":
                type: integer
                description: HTTP status code (e.g., 200 for success).
                example: 404
              "message":
                type: string
                description: A human-readable message describing the result.
                example: operation failed, resource not found
              "data":
                type: object
                example: null

    responseFailedInternal:
      description: failed
      content:
        application/json:
          schema:
            type: object
            properties:
              "code":
                type: integer
                format: int64
                example: 500
              "message":
                type: string
                example: operation failed, internal server error
              "data":
                type: object
                example: null
              
  #==================================#
  # schemas
  #==================================#
  schemas:
    #==================================#
    #    schema for USERS endpoint
    #==================================#
    user:
      type: object
      properties:
        id:
          type: number
          example: 1
        name:
          type: string
          example: "budi kosasi"
        email:
          type: string
          example: "budi@gmail.com"
        team:
          type: string
          example: "People"
        role:
          type: string
          example: "Admin"
        status:
          type: string
          example: "Active"
    create_user:
      type: object
      properties:
        name:
          type: string
          example: "budi kosasi"
        email:
          type: string
          example: "budi@gmail.com"
        password:
          type: string
          example: "inipassword"
        team:
          type: string
          example: "People"
        role:
          type: string
          example: "Admin"
        status:
          type: string
          example: "Active"
    update_user:
      type: object
      properties:
        name:
          type: string
          example: "budi kosasi update"
        email:
          type: string
          example: "budiu[date@gmail.com"
        password:
          type: string
          example: "inipasswordupdate"
    #==================================#
    # requestBodyMentee
    #==================================#
    requestBodyMentee:
      required:
        - "first_name"
        - "last_name"
        - "gender"
        - "email"
        - "status"
      type: object
      properties:
        "first_name":
          type: string
          example: stephen
        "last_name":
          type: string
          example: strange
        "gender":
          type: string
          example: male
        "email":
          type: string
          example: strange@mail.com
        "phone_number":
          type: string
          example: "087654"
        "telegram":
          type: string
          example: "@strange095"
        "class_id":
          type: integer
          format: int64
          example: 1
        "status_id":
          type: integer
          format: int64
          example: 1
        "education_type":
          type: string
          example: "non-informatics"
        "current_address":
          type: string
          example: jl. bleeker no 177A New York
        "emergency_name":
          type: string
          example: wong
        "emergency_phone":
          type: string
          example: "0876541"
        "emergency_status":
          type: string
          example: "Saudara"
        "major":
          type: string
          example: medical
        "graduate":
          type: string
          example: 2016
    #==================================#
    # responseMantee
    #==================================#
    mentee:
      type: object
      properties:
        "id":
          type: integer
          format: int64
          example: 1
        "first_name":
          type: string
          example: stephen
        "last_name":
          type: string
          example: strange
        "gender":
          type: string
          example: male
        "email":
          type: string
          example: strange@mail.com
        "phone_number":
          type: string
          example: "087654"
        "telegram":
          type: string
          example: "@strange095"
        "class_id":
          type: integer
          format: int64
          example: 1
        "status_id":
          type: integer
          format: int64
          example: 1
        "education_type":
          type: string
          example: "non-informatics"
        "current_address":
          type: string
          example: jl. bleeker no 177A New York
        "emergency_name":
          type: string
          example: wong
        "emergency_phone":
          type: string
          example: "0876541"
        "emergency_status":
          type: string
          example: "Saudara"
        "major":
          type: string
          example: medical
        "graduate":
          type: string
          example: 2016

    class:
      type: object
      properties:
        "id":
          type: integer
          format: int64
          example: 1
        "name":
          type: string
          example: FE 15
    
    status:
      type: object
      properties:
        "id":
          type: integer
          format: int64
          example: 1
        "name":
          type: string
          example: "interview"

    responseSuccessObject:
      type: object
      properties:
        "code":
          type: integer
          format: int64
          example: 200
        "message":
          type: string
          example: get data success
        "data":
          $ref: "#components/schemas/mentee"
    
    responseSuccessArray:
      type: object
      properties:
        "code":
          type: integer
          format: int64
          example: 200
        "message":
          type: string
          example: get data success
        "data":
          type: array
          $ref: "#components/schemas/ManteeArray" 

    ManteeArray:
      items:
        properties:
          "id":
            type: integer
            format: int64
            example: 1
          "first_name":
            type: string
            example: tony
          "last_name":
            type: string
            example: stark
          "class":
            $ref: "#components/schemas/class"
          "status":
            $ref: "#components/schemas/status"
          "education_type":
            type: string
            example: non_informatics
          "gender":
            type: string
            example: male